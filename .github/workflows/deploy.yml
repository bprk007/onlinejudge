name: Deploy to AWS EC2 via ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region (e.g., ap-south-1)'
        required: false
        default: ''

env:
  AWS_REGION: ${{ github.event.inputs.aws_region || secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and push Docker image
      - name: Build and push Docker image
        run: |
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          IMAGE_TAG=${GITHUB_SHA::7}  # Short commit SHA
          IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}"

          echo "Building and pushing Docker image..."
          docker build -t $IMAGE_URI:latest -t $IMAGE_URI:$IMAGE_TAG .
          docker push $IMAGE_URI:latest
          docker push $IMAGE_URI:$IMAGE_TAG

      # Deploy on EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            AWS_REGION=${{ env.AWS_REGION }}
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest"

            echo "Logging into ECR..."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            echo "Stopping old container if exists..."
            docker stop my-container || true
            docker rm my-container || true

            echo "Pulling latest image from ECR..."
            docker pull $IMAGE_URI

            echo "Running new container with .env file..."
            docker run -d \
              --name my-container \
              --env-file .env \
              -p 8000:8000 \
              $IMAGE_URI

            echo "Cleaning old Docker images..."
            docker image prune -af
